{"hierarchy":{"modules":[{"reference":"doc:\/\/MyTutorial\/tutorials\/MyTutorial\/Getting-Started","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/MyTutorial\/tutorials\/MyTutorial\/Tutorial1#Get-the-student-materials"}],"reference":"doc:\/\/MyTutorial\/tutorials\/MyTutorial\/Tutorial1"}]},{"projects":[{"sections":[{"reference":"doc:\/\/MyTutorial\/tutorials\/MyTutorial\/Tutorial2#Privacy-during-app-state-changes","kind":"task"}],"reference":"doc:\/\/MyTutorial\/tutorials\/MyTutorial\/Tutorial2"}],"reference":"doc:\/\/MyTutorial\/tutorials\/MyTutorial\/App-Privacy"}],"paths":[["doc:\/\/MyTutorial\/tutorials\/MyTutorial","doc:\/\/MyTutorial\/tutorials\/MyTutorial\/$volume","doc:\/\/MyTutorial\/tutorials\/MyTutorial\/App-Privacy"]],"reference":"doc:\/\/MyTutorial\/tutorials\/MyTutorial"},"identifier":{"url":"doc:\/\/MyTutorial\/tutorials\/MyTutorial\/Tutorial2","interfaceLanguage":"swift"},"sections":[{"image":"background.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"During launch, backgrounding and app resume, iOS will take a screenshot of your app for display whilst the app is fully loaded or backgrounded."}]},{"type":"paragraph","inlineContent":[{"text":"While this is assists in a seemingly uninterrupted app operation, the screenshots are not stored in a secure location.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to prevent this, you can hide your apps main window when you app becomes inactive and unhide it when your app resumes."}]}],"estimatedTimeInMinutes":20,"kind":"hero","chapter":"App Privacy","backgroundImage":"background.png","title":"App Privacy"},{"kind":"tasks","tasks":[{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"For this exercise, click on the Project files link to download and use the attached project file (Awake16) as your starting point for this exercise.","type":"text"}]},{"inlineContent":[{"type":"text","text":"A physical iOS device is not necessary for this exercise."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You’ll start by updating your AwakeApp main declaration to relay app state-change to other views in your app.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Privacy during app state changes","stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"On your Mac, open the Xcode project for “Awake1” - found in your Downloads folder."}]}],"runtimePreview":null,"type":"step","media":"tut4_image001.jpg","caption":[]},{"code":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Click Trust and Open when prompted."}],"type":"paragraph"}],"runtimePreview":null,"media":"tut4_image002.jpg","type":"step"},{"caption":[],"media":null,"content":[{"inlineContent":[{"text":"Use the project navigator to open ","type":"text"},{"inlineContent":[{"text":"AwakeApp.swift","type":"text"}],"type":"strong"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"step","code":"privacy_01.swift","runtimePreview":null},{"runtimePreview":null,"code":"privacy_02.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Update the file using the snippet of code below (the changes are highlighted):","type":"text"}]}],"caption":[],"media":null},{"runtimePreview":null,"caption":[],"code":"privacy_03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, open "},{"type":"strong","inlineContent":[{"text":"ContentView.swift","type":"text"}]}]}],"type":"step","media":null},{"content":[{"inlineContent":[{"type":"text","text":"Add the new environmentObject to the top."}],"type":"paragraph"}],"caption":[],"code":"privacy_04.swift","type":"step","media":null,"runtimePreview":null},{"caption":[],"code":"privacy_05.swift","content":[{"inlineContent":[{"type":"text","text":"Update part of "},{"inlineContent":[{"type":"text","text":"ContentView.swift"}],"type":"strong"},{"type":"text","text":" to make use of the newly added environmentObject ("},{"inlineContent":[{"type":"text","text":"blindsup"}],"type":"strong"},{"type":"text","text":")."}],"type":"paragraph"}],"type":"step","runtimePreview":null,"media":null},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the following additional "},{"type":"strong","inlineContent":[{"type":"text","text":"Blinds"}]},{"type":"text","text":" view declaration to the end of "},{"inlineContent":[{"type":"text","text":"ContentView.swift"}],"type":"strong"},{"type":"text","text":":"}]}],"type":"step","media":null,"code":"privacy_06.swift","runtimePreview":null},{"media":"tut4_image003.jpg","code":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Select an iPhone 16 as the destination Simulator for this project.","type":"text"}]}],"type":"step","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Compile and run this project in Simulator.","type":"text"}]}],"media":"tut4_image004.jpg","code":null,"runtimePreview":null,"type":"step","caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Test this app by opening it and then slowly swiping up from the bottom of the device screen to access multi-tasking."}]}],"caption":[],"code":null,"media":"tut4_image005.jpg","type":"step","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Examine the difference between this app’s item in the multi-tasking screen and other apps you have had running:"}]}],"code":null,"caption":[],"type":"step","runtimePreview":null,"media":"tut4_image006.jpg"},{"caption":[],"type":"step","runtimePreview":null,"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When done, stop tasks for this project."}]}],"media":null}],"anchor":"Privacy-during-app-state-changes"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"category":"PretendCo Training","categoryPathComponent":"MyTutorial","role":"project","title":"App Privacy"},"kind":"project","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/mytutorial\/tutorial2"]}],"references":{"privacy_05.swift":{"syntax":"swift","identifier":"privacy_05.swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":29},{"line":30},{"line":31},{"line":33},{"line":34},{"line":35}],"fileName":"ContentView.swift","type":"file","content":["import SwiftUI","","struct ContentView: View {","    @ObservedObject var store: CoffeeStore","    @EnvironmentObject var blindsup: BlindsStore","    ","    var body: some View {","        if blindsup.blindsup {","            Blinds()","        }","        else {","            NavigationView {","                List{","                    ForEach(store.coffees)  { coffee in","                        if coffee.isReady == \"Y\" {","                            OrderCompleteCell(coffee: coffee)","                        }","                        else {","                            OrderCell(coffee: coffee)","                        }","                    }","                    HStack {","                        Spacer()","                        Text(\"\\(store.coffees.count) coffee orders\")","                            .foregroundColor(.secondary)","                        Spacer()","                    }","                }","                .navigationTitle(\"Coffees\")","                .navigationBarItems(trailing: HStack {","                    AddButton(destination: NewCoffee(store: store)) } )","            }","            .onAppear(perform: {","                    self.fetchNewData()","            })","        }","    }","    ","    func loadOrders() {","        \/\/Coffee(name: \"Pat\", milk: \"Full\", sugar: 1, isReady: \"N\", price: 4.5, type: \"Flat White\", size: \"Large\", created: Date()),","        if let data = NSDictionary(contentsOfFile: dataFileURL().path),","            let orderarray = data[\"orders\"]! as? [[String: AnyObject]] {","            \/\/clear out old orders:","            store.coffees.removeAll(keepingCapacity: true)","            for anorder in orderarray {","                store.coffees.append(Coffee(name: anorder[\"name\"] as! String, milk: anorder[\"milk\"] as! String, sugar: anorder[\"sugar\"] as! Int, isReady: anorder[\"isReady\"] as! String, price: anorder[\"price\"] as! Double, type: anorder[\"type\"] as! String, size: anorder[\"size\"] as! String, created: anorder[\"tstamp\"] as! Date))","            }","        }","    }","","    func fetchNewData() {","        if let url = NSURL(string: \"https:\/\/consultants.apple.com\/au\/ttanz\/orders.plist\") {","            let session = URLSession(configuration: URLSessionConfiguration.ephemeral)","            let task = session.dataTask(with: url as URL, completionHandler: { (data, response, error) -> Void in","                if error != nil {","                    print(\"error: \\(error!.localizedDescription))\")","                }","                else if data != nil {","                    print(\"new download successful\")","                    if let data = data {","                        do {","                            try data.write(to: self.dataFileURL())","                            print(\"wrote file to dataFileURL\")","                            DispatchQueue.main.async {","                                self.loadOrders()","                            }","                        } catch { print(\"this did not work\") }","                    }","                    DispatchQueue.main.async { self.loadOrders() }","                }","            })","            task.resume()","        }","        else {","            print(\"Unable to create NSURL\")","        }","    }","    ","    func dataFileURL() -> URL {","        let fm = FileManager.default","        let localFilePath = fm.urls(for: .documentDirectory, in: .userDomainMask).first","        let fullPath = localFilePath?.appendingPathComponent(\"orders.plist\")","        ","        if !fm.fileExists(atPath: fullPath!.absoluteURL.path) {","            print(\"No downloaded orders.plist file found, so copying included bundle\")","            let bundledDataPath = Bundle.main.path(forResource: \"orders\", ofType: \"plist\")!","            try! fm.copyItem(atPath: bundledDataPath, toPath: (fullPath?.path)!)","        }","        return fullPath!","    }","}","","    ","struct OrderCell: View {","    var coffee: Coffee","    var body: some View {","        NavigationLink(destination: CoffeeDetail(coffee: coffee)) {","            HStack {","                Image(coffee.thumb)","                    .cornerRadius(8)","                    .padding(.init(top: 0, leading: -10, bottom: 0, trailing: 0))","                VStack(alignment: .leading) {","                    Text(coffee.name)","                    Text(coffee.size + \" \" + coffee.milk + \" milk \" + coffee.type)","                        .font(.subheadline)","                }","            }","        }","    }","}","","struct OrderCompleteCell: View {","    var coffee: Coffee","    var body: some View {","        NavigationLink(destination: CoffeeDetail(coffee: coffee)) {","            HStack {","                Image(coffee.thumb)","                    .cornerRadius(8)","                    .padding(.init(top: 0, leading: -10, bottom: 0, trailing: 0))","                VStack(alignment: .leading) {","                    Text(coffee.name)","                    Text(coffee.size + \" \" + coffee.milk + \" \" + coffee.type)","                        .font(.subheadline)","                }","                Spacer()","                Image(systemName: \"checkmark.rectangle.fill\")","                    .resizable()","                    .aspectRatio(contentMode: .fit)","                    .foregroundColor(.green)","                    .frame(width: 40.0, height: 30.0)","            }","        }.deleteDisabled(true)","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        ContentView(store: testStore)","    }","}","","struct AddButton<Destination : View>: View {","    var destination:  Destination","    var body: some View {","        NavigationLink(destination: self.destination) {","            Image(systemName: \"plus.circle.fill\")","                .resizable()","                .aspectRatio(contentMode: .fit)","                .frame(width: 30.0, height: 30.0)","        }","    }","}"],"fileType":"swift"},"doc://MyTutorial/tutorials/MyTutorial/Getting-Started":{"title":"Getting Started","role":"article","kind":"article","url":"\/tutorials\/mytutorial\/getting-started","type":"topic","identifier":"doc:\/\/MyTutorial\/tutorials\/MyTutorial\/Getting-Started","abstract":[]},"tut4_image006.jpg":{"variants":[{"traits":["1x","light"],"url":"\/images\/MyTutorial\/tut4_image006.jpg"}],"alt":"<#accessible description#>","identifier":"tut4_image006.jpg","type":"image"},"tut4_image003.jpg":{"variants":[{"traits":["1x","light"],"url":"\/images\/MyTutorial\/tut4_image003.jpg"}],"type":"image","identifier":"tut4_image003.jpg","alt":"<#accessible description#>"},"tut4_image005.jpg":{"variants":[{"traits":["1x","light"],"url":"\/images\/MyTutorial\/tut4_image005.jpg"}],"type":"image","identifier":"tut4_image005.jpg","alt":"<#accessible description#>"},"privacy_02.swift":{"syntax":"swift","identifier":"privacy_02.swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":12},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}],"fileName":"AwakeApp.swift","type":"file","content":["import SwiftUI","","@main","struct AwakeApp: App {","    @StateObject private var store = CoffeeStore()","    @StateObject private var blindsup = BlindsStore()","    @Environment(\\.scenePhase) private var scenePhase","    ","    var body: some Scene {","        WindowGroup {","            ContentView(store: store)","            .environmentObject(blindsup)","        }","        .onChange(of: scenePhase) { phase in","            if phase == .active {","                blindsup.blindsup = false","            }","            if phase == .inactive {","                blindsup.blindsup = true","            }","        }","    }","}","class BlindsStore: ObservableObject {","    @Published var blindsup: Bool","","    init(blindsup: Bool = false) {","        self.blindsup = blindsup","    }","}","","struct BlindsUp {","    var blindsup: Bool","}"],"fileType":"swift"},"tut4_image002.jpg":{"variants":[{"traits":["1x","light"],"url":"\/images\/MyTutorial\/tut4_image002.jpg"}],"type":"image","identifier":"tut4_image002.jpg","alt":"<#accessible description#>"},"tut4_image001.jpg":{"variants":[{"traits":["1x","light"],"url":"\/images\/MyTutorial\/tut4_image001.jpg"}],"type":"image","identifier":"tut4_image001.jpg","alt":"<#accessible description#>"},"background.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/MyTutorial\/background.png"}],"type":"image","identifier":"background.png","alt":"Background image of people gathered around a computer."},"doc://MyTutorial/tutorials/MyTutorial/Tutorial2#Privacy-during-app-state-changes":{"title":"Privacy during app state changes","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/mytutorial\/tutorial2#Privacy-during-app-state-changes","type":"section","identifier":"doc:\/\/MyTutorial\/tutorials\/MyTutorial\/Tutorial2#Privacy-during-app-state-changes","abstract":[{"text":"During launch, backgrounding and app resume, iOS will take a screenshot of your app for display whilst the app is fully loaded or backgrounded.","type":"text"}]},"privacy_03.swift":{"fileName":"ContentView.swift","fileType":"swift","syntax":"swift","content":["import SwiftUI","","struct ContentView: View {","    @ObservedObject var store: CoffeeStore","    ","    var body: some View {","        NavigationView {","            List{","                ForEach(store.coffees)  { coffee in","                    if coffee.isReady == \"Y\" {","                        OrderCompleteCell(coffee: coffee)","                    }","                    else {","                        OrderCell(coffee: coffee)","                    }","                }","                HStack {","                    Spacer()","                    Text(\"\\(store.coffees.count) coffee orders\")","                        .foregroundColor(.secondary)","                    Spacer()","                }","            }","            .navigationTitle(\"Coffees\")","            .navigationBarItems(trailing: HStack { AddButton(destination: NewCoffee(store: store)) } )","        }","        .onAppear(perform: {","                self.fetchNewData()","        })","    }","    ","    func loadOrders() {","        \/\/Coffee(name: \"Pat\", milk: \"Full\", sugar: 1, isReady: \"N\", price: 4.5, type: \"Flat White\", size: \"Large\", created: Date()),","        if let data = NSDictionary(contentsOfFile: dataFileURL().path),","            let orderarray = data[\"orders\"]! as? [[String: AnyObject]] {","            \/\/clear out old orders:","            store.coffees.removeAll(keepingCapacity: true)","            for anorder in orderarray {","                store.coffees.append(Coffee(name: anorder[\"name\"] as! String, milk: anorder[\"milk\"] as! String, sugar: anorder[\"sugar\"] as! Int, isReady: anorder[\"isReady\"] as! String, price: anorder[\"price\"] as! Double, type: anorder[\"type\"] as! String, size: anorder[\"size\"] as! String, created: anorder[\"tstamp\"] as! Date))","            }","        }","    }","","    func fetchNewData() {","        if let url = NSURL(string: \"https:\/\/consultants.apple.com\/au\/ttanz\/orders.plist\") {","            let session = URLSession(configuration: URLSessionConfiguration.ephemeral)","            let task = session.dataTask(with: url as URL, completionHandler: { (data, response, error) -> Void in","                if error != nil {","                    print(\"error: \\(error!.localizedDescription))\")","                }","                else if data != nil {","                    print(\"new download successful\")","                    if let data = data {","                        do {","                            try data.write(to: self.dataFileURL())","                            print(\"wrote file to dataFileURL\")","                            DispatchQueue.main.async {","                                self.loadOrders()","                            }","                        } catch { print(\"this did not work\") }","                    }","                    DispatchQueue.main.async { self.loadOrders() }","                }","            })","            task.resume()","        }","        else {","            print(\"Unable to create NSURL\")","        }","    }","    ","    func dataFileURL() -> URL {","        let fm = FileManager.default","        let localFilePath = fm.urls(for: .documentDirectory, in: .userDomainMask).first","        let fullPath = localFilePath?.appendingPathComponent(\"orders.plist\")","        ","        if !fm.fileExists(atPath: fullPath!.absoluteURL.path) {","            print(\"No downloaded orders.plist file found, so copying included bundle\")","            let bundledDataPath = Bundle.main.path(forResource: \"orders\", ofType: \"plist\")!","            try! fm.copyItem(atPath: bundledDataPath, toPath: (fullPath?.path)!)","        }","        return fullPath!","    }","}","","    ","struct OrderCell: View {","    var coffee: Coffee","    var body: some View {","        NavigationLink(destination: CoffeeDetail(coffee: coffee)) {","            HStack {","                Image(coffee.thumb)","                    .cornerRadius(8)","                    .padding(.init(top: 0, leading: -10, bottom: 0, trailing: 0))","                VStack(alignment: .leading) {","                    Text(coffee.name)","                    Text(coffee.size + \" \" + coffee.milk + \" milk \" + coffee.type)","                        .font(.subheadline)","                }","            }","        }","    }","}","","struct OrderCompleteCell: View {","    var coffee: Coffee","    var body: some View {","        NavigationLink(destination: CoffeeDetail(coffee: coffee)) {","            HStack {","                Image(coffee.thumb)","                    .cornerRadius(8)","                    .padding(.init(top: 0, leading: -10, bottom: 0, trailing: 0))","                VStack(alignment: .leading) {","                    Text(coffee.name)","                    Text(coffee.size + \" \" + coffee.milk + \" \" + coffee.type)","                        .font(.subheadline)","                }","                Spacer()","                Image(systemName: \"checkmark.rectangle.fill\")","                    .resizable()","                    .aspectRatio(contentMode: .fit)","                    .foregroundColor(.green)","                    .frame(width: 40.0, height: 30.0)","            }","        }.deleteDisabled(true)","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        ContentView(store: testStore)","    }","}","","struct AddButton<Destination : View>: View {","    var destination:  Destination","    var body: some View {","        NavigationLink(destination: self.destination) {","            Image(systemName: \"plus.circle.fill\")","                .resizable()","                .aspectRatio(contentMode: .fit)","                .frame(width: 30.0, height: 30.0)","        }","    }","}"],"highlights":[],"identifier":"privacy_03.swift","type":"file"},"tut4_image004.jpg":{"variants":[{"traits":["1x","light"],"url":"\/images\/MyTutorial\/tut4_image004.jpg"}],"alt":"<#accessible description#>","identifier":"tut4_image004.jpg","type":"image"},"privacy_06.swift":{"syntax":"swift","identifier":"privacy_06.swift","highlights":[{"line":153},{"line":154},{"line":155},{"line":156},{"line":157},{"line":158},{"line":159},{"line":160},{"line":161},{"line":162},{"line":163},{"line":164},{"line":165},{"line":166},{"line":167},{"line":168},{"line":169},{"line":170},{"line":171},{"line":172},{"line":173},{"line":174}],"fileName":"ContentView.swift","type":"file","content":["import SwiftUI","","struct ContentView: View {","    @ObservedObject var store: CoffeeStore","    @EnvironmentObject var blindsup: BlindsStore","    ","    var body: some View {","        if blindsup.blindsup {","            Blinds()","        }","        else {","            NavigationView {","                List{","                    ForEach(store.coffees)  { coffee in","                        if coffee.isReady == \"Y\" {","                            OrderCompleteCell(coffee: coffee)","                        }","                        else {","                            OrderCell(coffee: coffee)","                        }","                    }","                    HStack {","                        Spacer()","                        Text(\"\\(store.coffees.count) coffee orders\")","                            .foregroundColor(.secondary)","                        Spacer()","                    }","                }","                .navigationTitle(\"Coffees\")","                .navigationBarItems(trailing: HStack {","                    AddButton(destination: NewCoffee(store: store)) } )","            }","            .onAppear(perform: {","                    self.fetchNewData()","            })","        }","    }","    ","    func loadOrders() {","        \/\/Coffee(name: \"Pat\", milk: \"Full\", sugar: 1, isReady: \"N\", price: 4.5, type: \"Flat White\", size: \"Large\", created: Date()),","        if let data = NSDictionary(contentsOfFile: dataFileURL().path),","            let orderarray = data[\"orders\"]! as? [[String: AnyObject]] {","            \/\/clear out old orders:","            store.coffees.removeAll(keepingCapacity: true)","            for anorder in orderarray {","                store.coffees.append(Coffee(name: anorder[\"name\"] as! String, milk: anorder[\"milk\"] as! String, sugar: anorder[\"sugar\"] as! Int, isReady: anorder[\"isReady\"] as! String, price: anorder[\"price\"] as! Double, type: anorder[\"type\"] as! String, size: anorder[\"size\"] as! String, created: anorder[\"tstamp\"] as! Date))","            }","        }","    }","","    func fetchNewData() {","        if let url = NSURL(string: \"https:\/\/consultants.apple.com\/au\/ttanz\/orders.plist\") {","            let session = URLSession(configuration: URLSessionConfiguration.ephemeral)","            let task = session.dataTask(with: url as URL, completionHandler: { (data, response, error) -> Void in","                if error != nil {","                    print(\"error: \\(error!.localizedDescription))\")","                }","                else if data != nil {","                    print(\"new download successful\")","                    if let data = data {","                        do {","                            try data.write(to: self.dataFileURL())","                            print(\"wrote file to dataFileURL\")","                            DispatchQueue.main.async {","                                self.loadOrders()","                            }","                        } catch { print(\"this did not work\") }","                    }","                    DispatchQueue.main.async { self.loadOrders() }","                }","            })","            task.resume()","        }","        else {","            print(\"Unable to create NSURL\")","        }","    }","    ","    func dataFileURL() -> URL {","        let fm = FileManager.default","        let localFilePath = fm.urls(for: .documentDirectory, in: .userDomainMask).first","        let fullPath = localFilePath?.appendingPathComponent(\"orders.plist\")","        ","        if !fm.fileExists(atPath: fullPath!.absoluteURL.path) {","            print(\"No downloaded orders.plist file found, so copying included bundle\")","            let bundledDataPath = Bundle.main.path(forResource: \"orders\", ofType: \"plist\")!","            try! fm.copyItem(atPath: bundledDataPath, toPath: (fullPath?.path)!)","        }","        return fullPath!","    }","}","","    ","struct OrderCell: View {","    var coffee: Coffee","    var body: some View {","        NavigationLink(destination: CoffeeDetail(coffee: coffee)) {","            HStack {","                Image(coffee.thumb)","                    .cornerRadius(8)","                    .padding(.init(top: 0, leading: -10, bottom: 0, trailing: 0))","                VStack(alignment: .leading) {","                    Text(coffee.name)","                    Text(coffee.size + \" \" + coffee.milk + \" milk \" + coffee.type)","                        .font(.subheadline)","                }","            }","        }","    }","}","","struct OrderCompleteCell: View {","    var coffee: Coffee","    var body: some View {","        NavigationLink(destination: CoffeeDetail(coffee: coffee)) {","            HStack {","                Image(coffee.thumb)","                    .cornerRadius(8)","                    .padding(.init(top: 0, leading: -10, bottom: 0, trailing: 0))","                VStack(alignment: .leading) {","                    Text(coffee.name)","                    Text(coffee.size + \" \" + coffee.milk + \" \" + coffee.type)","                        .font(.subheadline)","                }","                Spacer()","                Image(systemName: \"checkmark.rectangle.fill\")","                    .resizable()","                    .aspectRatio(contentMode: .fit)","                    .foregroundColor(.green)","                    .frame(width: 40.0, height: 30.0)","            }","        }.deleteDisabled(true)","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        ContentView(store: testStore)","    }","}","","struct AddButton<Destination : View>: View {","    var destination:  Destination","    var body: some View {","        NavigationLink(destination: self.destination) {","            Image(systemName: \"plus.circle.fill\")","                .resizable()","                .aspectRatio(contentMode: .fit)","                .frame(width: 30.0, height: 30.0)","        }","    }","}","","struct Blinds: View {","    var body: some View {","        HStack {","            Spacer()","            VStack {","                Spacer()","                Image(systemName: \"eye.slash.fill\")","                    .resizable()","                    .aspectRatio(contentMode: .fit)","                    .foregroundColor(.blue)","                    .frame(width: 80.0, height: 80.0)","                    .padding()","                Spacer()","            }","            .background(Color.black)","            Spacer()","        }","        .background(Color.black)","        .edgesIgnoringSafeArea(.all)","    }","}"],"fileType":"swift"},"doc://MyTutorial/tutorials/MyTutorial/App-Privacy":{"identifier":"doc:\/\/MyTutorial\/tutorials\/MyTutorial\/App-Privacy","abstract":[],"title":"App Privacy","type":"topic","url":"\/tutorials\/mytutorial\/app-privacy","role":"article","kind":"article"},"privacy_01.swift":{"syntax":"swift","identifier":"privacy_01.swift","highlights":[],"fileName":"AwakeApp.swift","type":"file","content":["import SwiftUI","","@main","struct AwakeApp: App {","    @StateObject private var store = CoffeeStore()","    var body: some Scene {","        WindowGroup {","            ContentView(store: store)","        }","    }","}"],"fileType":"swift"},"doc://MyTutorial/tutorials/MyTutorial/Tutorial1":{"identifier":"doc:\/\/MyTutorial\/tutorials\/MyTutorial\/Tutorial1","abstract":[{"text":"You’re invited to learn about secure app development in SwiftUI using Xcode. These tutorials will cover:","type":"text"}],"title":"Introduction","type":"topic","url":"\/tutorials\/mytutorial\/tutorial1","role":"project","kind":"project","estimatedTime":"2min"},"doc://MyTutorial/tutorials/MyTutorial":{"title":"Writing Secure Apps","role":"overview","kind":"overview","url":"\/tutorials\/mytutorial","type":"topic","identifier":"doc:\/\/MyTutorial\/tutorials\/MyTutorial","abstract":[{"text":"In these tutorials you will learn to add a few secure measures to your apps.","type":"text"}]},"doc://MyTutorial/tutorials/MyTutorial/Tutorial1#Get-the-student-materials":{"type":"section","abstract":[{"type":"text","text":"You’re invited to learn about secure app development in SwiftUI using Xcode. These tutorials will cover:"}],"role":"pseudoSymbol","url":"\/tutorials\/mytutorial\/tutorial1#Get-the-student-materials","identifier":"doc:\/\/MyTutorial\/tutorials\/MyTutorial\/Tutorial1#Get-the-student-materials","title":"Get the student materials","kind":"section"},"doc://MyTutorial/tutorials/MyTutorial/Tutorial2":{"role":"project","abstract":[{"type":"text","text":"During launch, backgrounding and app resume, iOS will take a screenshot of your app for display whilst the app is fully loaded or backgrounded."}],"identifier":"doc:\/\/MyTutorial\/tutorials\/MyTutorial\/Tutorial2","url":"\/tutorials\/mytutorial\/tutorial2","estimatedTime":"20min","title":"App Privacy","kind":"project","type":"topic"},"privacy_04.swift":{"fileName":"ContentView.swift","fileType":"swift","syntax":"swift","content":["import SwiftUI","","struct ContentView: View {","    @ObservedObject var store: CoffeeStore","    @EnvironmentObject var blindsup: BlindsStore","    ","    var body: some View {","        NavigationView {","            List{","                ForEach(store.coffees)  { coffee in","                    if coffee.isReady == \"Y\" {","                        OrderCompleteCell(coffee: coffee)","                    }","                    else {","                        OrderCell(coffee: coffee)","                    }","                }","                HStack {","                    Spacer()","                    Text(\"\\(store.coffees.count) coffee orders\")","                        .foregroundColor(.secondary)","                    Spacer()","                }","            }","            .navigationTitle(\"Coffees\")","            .navigationBarItems(trailing: HStack { AddButton(destination: NewCoffee(store: store)) } )","        }","        .onAppear(perform: {","                self.fetchNewData()","        })","    }","    ","    func loadOrders() {","        \/\/Coffee(name: \"Pat\", milk: \"Full\", sugar: 1, isReady: \"N\", price: 4.5, type: \"Flat White\", size: \"Large\", created: Date()),","        if let data = NSDictionary(contentsOfFile: dataFileURL().path),","            let orderarray = data[\"orders\"]! as? [[String: AnyObject]] {","            \/\/clear out old orders:","            store.coffees.removeAll(keepingCapacity: true)","            for anorder in orderarray {","                store.coffees.append(Coffee(name: anorder[\"name\"] as! String, milk: anorder[\"milk\"] as! String, sugar: anorder[\"sugar\"] as! Int, isReady: anorder[\"isReady\"] as! String, price: anorder[\"price\"] as! Double, type: anorder[\"type\"] as! String, size: anorder[\"size\"] as! String, created: anorder[\"tstamp\"] as! Date))","            }","        }","    }","","    func fetchNewData() {","        if let url = NSURL(string: \"https:\/\/consultants.apple.com\/au\/ttanz\/orders.plist\") {","            let session = URLSession(configuration: URLSessionConfiguration.ephemeral)","            let task = session.dataTask(with: url as URL, completionHandler: { (data, response, error) -> Void in","                if error != nil {","                    print(\"error: \\(error!.localizedDescription))\")","                }","                else if data != nil {","                    print(\"new download successful\")","                    if let data = data {","                        do {","                            try data.write(to: self.dataFileURL())","                            print(\"wrote file to dataFileURL\")","                            DispatchQueue.main.async {","                                self.loadOrders()","                            }","                        } catch { print(\"this did not work\") }","                    }","                    DispatchQueue.main.async { self.loadOrders() }","                }","            })","            task.resume()","        }","        else {","            print(\"Unable to create NSURL\")","        }","    }","    ","    func dataFileURL() -> URL {","        let fm = FileManager.default","        let localFilePath = fm.urls(for: .documentDirectory, in: .userDomainMask).first","        let fullPath = localFilePath?.appendingPathComponent(\"orders.plist\")","        ","        if !fm.fileExists(atPath: fullPath!.absoluteURL.path) {","            print(\"No downloaded orders.plist file found, so copying included bundle\")","            let bundledDataPath = Bundle.main.path(forResource: \"orders\", ofType: \"plist\")!","            try! fm.copyItem(atPath: bundledDataPath, toPath: (fullPath?.path)!)","        }","        return fullPath!","    }","}","","    ","struct OrderCell: View {","    var coffee: Coffee","    var body: some View {","        NavigationLink(destination: CoffeeDetail(coffee: coffee)) {","            HStack {","                Image(coffee.thumb)","                    .cornerRadius(8)","                    .padding(.init(top: 0, leading: -10, bottom: 0, trailing: 0))","                VStack(alignment: .leading) {","                    Text(coffee.name)","                    Text(coffee.size + \" \" + coffee.milk + \" milk \" + coffee.type)","                        .font(.subheadline)","                }","            }","        }","    }","}","","struct OrderCompleteCell: View {","    var coffee: Coffee","    var body: some View {","        NavigationLink(destination: CoffeeDetail(coffee: coffee)) {","            HStack {","                Image(coffee.thumb)","                    .cornerRadius(8)","                    .padding(.init(top: 0, leading: -10, bottom: 0, trailing: 0))","                VStack(alignment: .leading) {","                    Text(coffee.name)","                    Text(coffee.size + \" \" + coffee.milk + \" \" + coffee.type)","                        .font(.subheadline)","                }","                Spacer()","                Image(systemName: \"checkmark.rectangle.fill\")","                    .resizable()","                    .aspectRatio(contentMode: .fit)","                    .foregroundColor(.green)","                    .frame(width: 40.0, height: 30.0)","            }","        }.deleteDisabled(true)","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        ContentView(store: testStore)","    }","}","","struct AddButton<Destination : View>: View {","    var destination:  Destination","    var body: some View {","        NavigationLink(destination: self.destination) {","            Image(systemName: \"plus.circle.fill\")","                .resizable()","                .aspectRatio(contentMode: .fit)","                .frame(width: 30.0, height: 30.0)","        }","    }","}"],"highlights":[{"line":5}],"identifier":"privacy_04.swift","type":"file"}}}